

## 1. **Join Practice:**

##  Write a query to display the customer's first name, last name, email, and city they live in.
select c.first_name, c.last_name, c.email, city
from customer c
join address a on c.address_id = a.address_id
join city ci on a.city_id = ci.city_id;


## 2. **Subquery Practice (Single Row):**
## Retrieve the film title, description, and release year for the film that has the longest duration.

select title, description, release_year
from film
where length = (select max(length) from film);


## 3. **Join Practice (Multiple Joins):**
## List the customer name, rental date, and film title for each rental made. Include customers who have never
## rented a film

select c.first_name, c.last_name, r.rental_date, f.title
from customer c
left join rental r on c.customer_id = r.customer_id
left join inventory i on r.inventory_id = i.inventory_id
left join film f on i.film_id = f.film_id;


## 4. **Subquery Practice (Multiple Rows):**
## Find the number of actors for each film. Display the film title and the number of actors for each film.

select f.title, count(actor_id) as actor_count
from film f
left join film_actor fa on f.film_id = fa.film_id
group by f.title;


## 5. **Join Practice (Using Aliases):**

## Display the first name, last name, and email of customers along with the rental date, film title, and rental 
## return date.

SELECT c.first_name, c.last_name, c.email, r.rental_date, f.title, r.return_date
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;


## 6. **Subquery Practice (Conditional):**
## Retrieve the film titles that are rented by customers whose email domain ends with '.net'.

SELECT title
FROM film
WHERE film_id IN (
SELECT film_id
FROM inventory
WHERE store_id IN (
SELECT store_id
FROM customer
WHERE email LIKE '%.net'));


## 7. **Join Practice (Aggregation):**
## Show the total number of rentals made by each customer, along with their first and last names.

SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals
FROM customer c
LEFT JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY total_rentals DESC;

## 8. **Subquery Practice (Aggregation):**
## List the customers who have made more rentals than the average number of rentals made by all customers.
 
select first_name, last_name from customer
where customer_id IN ( select customer_id from rental
group by customer_id
having count(rental_id)> (select avg(rental_count)
from (select count(rental_id) as rental_count
from rental
group by customer_id) as avg_rentals ));


## 9. **Join Practice (Self Join):**
## Display the customer first name, last name, and email along with the names of other customers living in the same city.

select c1.first_name, c1.last_name, c1.email, c2.first_name as other_first_name,
c2.last_name as other_last_name
from customer c1
join address a1 on c1.address_id = a1.address_id
join address a2 on a1.city = a2.city and a1.address_id != a2.address_id
join customer c2 on a2.address_id = c2.address_id;
 

## 10. **Subquery Practice (Correlated Subquery):**
## Retrieve the film titles with a rental rate higher than the average rental rate of films in the same category

select title, rental_rate
from film f
where rental_rate>(
select avg(rental_rate)
from film
where category_id = f.category_id);


## 11. **Subquery Practice (Nested Subquery):**
##  Retrieve the film titles along with their descriptions and lengths that have a rental rate greater than the 
## average rental rate of films released in the same year

select title, description, length
from film
where rental_rate> (
 select avg(rental_rate)
 from film
 where release_year = film.release_year);

## 12. **Subquery Practice (IN Operator):**
##List the first name, last name, and email of customers who have rented at least one film in the 
 ##'Documentary' category.


SELECT first_name, last_name, email
FROM customer
WHERE customer_id IN (
SELECT DISTINCT c.customer_id
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film_category fc ON i.film_id = fc.film_id
JOIN category cat ON fc.category_id = cat.category_id
WHERE cat.name = 'Documentary'
);



## 13. **Subquery Practice (Scalar Subquery):**
## Show the title, rental rate, and difference from the average rental rate for each film. 

select title, rental_rate,
 rental_rate - (select avg(rental_rate) from film ) as rate_difference
 from film;
 
 
  ## 14. **Subquery Practice (Existence Check):**
## Retrieve the titles of films that have never been rented.
 
 
 select title from film
 where film_id not in (
 select distinct film_id
 from inventory
 where film_id is not null );
 
 
## 15. **Subquery Practice (Correlated Subquery - Multiple Conditions):**
## List the titles of films whose rental rate is higher than the average rental rate of films released in the same 
 ## year and belong to the 'Sci-Fi' category.
 
 select title
 from film f
 where rental_rate>(
 select avg(rental_rate)
 from film
 where release_year = f.release_year)
     and film_id in (
     select fc.film_id
     from film_category fc
     join category c on fc.category_id = c.category_id
     where c.name = 'Sci-Fi');

## 16. **Subquery Practice (Conditional Aggregation):**
## Find the number of films rented by each customer, excluding customers who have rented fewer than five  films.

select customer_id, count(rental_id) as film_count
from rental
group by customer_id
having count (rental_id) >=5;
